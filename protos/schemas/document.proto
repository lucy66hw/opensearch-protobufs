/**
 This is generated from the spec. DO NOT manually modify.
 */
syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.opensearch.protobufs";
option java_outer_classname = "DocumentProto";
option go_package = "opensearchpb";

import "google/protobuf/struct.proto";
import "protos/schemas/common.proto";


message BulkRequest {
  // Name of the data stream, index, or index alias to perform bulk actions on.
  string index = 1;

  repeated BulkRequestInner bulk_request_inner = 2;

  // `true` or `false` to return the `_source` field or not, or a list of fields to return.
  optional SourceConfigParam underscore_source = 3;

  // A comma-separated list of source fields to exclude from the response.
  repeated string underscore_source_excludes = 4;

  // A comma-separated list of source fields to include in the response.
  repeated string underscore_source_includes = 5;

  // ID of the pipeline to use to preprocess incoming documents. If the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request. If a final pipeline is configured it will always run, regardless of the value of this parameter.
  optional string pipeline = 6;

  // If `true`, OpenSearch refreshes the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` do nothing with refreshes. Valid values: `true`, `false`, `wait_for`.
  optional Refresh refresh = 7;

  // If `true`, the request's actions must target an index alias.
  optional bool require_alias = 8;

  // Custom value used to route operations to a specific shard.
  repeated string routing = 9;

  // Period each action waits for the following operations: automatic index creation, dynamic mapping updates, waiting for active shards.
  optional string timeout = 10;

  // Default document type for items which don't provide one.
  optional string type = 11;

  // The number of shard copies that must be active before proceeding with the operation. Set to all or any positive integer up to the total number of shards in the index (`number_of_replicas+1`).
  optional WaitForActiveShards wait_for_active_shards = 12;

  // Whether to pretty format the returned JSON response.
  optional bool pretty = 13;

  // Whether to return human readable values for statistics.
  optional bool human = 14;

  // Whether to include the stack trace of returned errors.
  optional bool error_trace = 15;

  // The URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
  optional string source = 16;

  // Used to reduce the response. This parameter takes a comma-separated list of filters. It supports using wildcards to match any field or part of a fieldâ€™s name. You can also exclude fields with \"-\".
  repeated string filter_path = 17;
}

message BulkRequestInner {
  optional OperationContainer operation_container = 1;

  optional UpdateAction update_action = 2;

  optional ObjectMap object_map = 3;
}

message OperationContainer {
  oneof operation_container {
    WriteOperation index = 1;

    WriteOperation create = 2;

    UpdateOperation update = 3;

    OperationBase delete = 4;
  }
}

message OperationBase {
  // The routing value for the document.
  optional string routing = 1;

  optional int64 if_primary_term = 2;

  // The sequence number of the document.
  optional int64 if_seq_no = 3;

  optional int64 version = 4;

  optional VersionType version_type = 5;

  // The unique identifier for a resource.
  optional string underscore_id = 6;

  optional string underscore_index = 7;
}

message UpdateAction {
  // When `false` disables the setting `result` in the response to `noop` if no change to the document occurred.
  optional bool detect_noop = 1;

  // A partial update to an existing document.
  optional ObjectMap doc = 2;

  // When `true`, uses the contents of `doc` as the value of `upsert`.
  optional bool doc_as_upsert = 3;

  optional Script script = 4;

  // When `true`, executes the script whether or not the document exists.
  optional bool scripted_upsert = 5;

  // If the document does not already exist, the contents of `upsert` are inserted as a new document. If the document exists, the `script` is executed.
  optional ObjectMap upsert = 6;

  optional SourceConfig underscore_source = 7;
}

message WriteOperation {
  // The routing value for the document.
  optional string routing = 1;

  optional int64 if_primary_term = 2;

  // The sequence number of the document.
  optional int64 if_seq_no = 3;

  optional int64 version = 4;

  optional VersionType version_type = 5;

  // The unique identifier for a resource.
  optional string underscore_id = 6;

  optional string underscore_index = 7;

  // A map from the full name of fields to the name of dynamic templates. If a name matches a dynamic template, then that template will be applied regardless of other match predicates defined in the template. If a field is already defined in the mapping, then this parameter won't be used.
  map<string, string> dynamic_templates = 8;

  // The pipeline ID for preprocessing documents. When the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request. When a final pipeline is configured, that pipeline will always run, regardless of the value of this parameter.
  optional string pipeline = 9;

  // When `true`, require that all actions target an index alias rather than an index. Default is `false`.
  optional bool require_alias = 10;
}


enum OpType {
  OP_TYPE_UNSPECIFIED = 0;
  // Index a document only if it doesn't exist. Similarly as PUT <index>/_create/<_id>, will throw error if the document exist
  OP_TYPE_CREATE = 1;
  // A document ID is included in the request. default value.
  OP_TYPE_INDEX = 2;
}

message VersionType {
  oneof version_type {
    // The version number must be higher than the current version.
    bool version_type_external = 1;

    // The version number must be higher than or equal to the current version.
    bool version_type_external_gte = 2;

    // The version number is forced to be the given value.
    bool version_type_force = 3;

    // The version number is managed internally by OpenSearch.
    bool version_type_internal = 4;
  }
}

message UpdateOperation {
  // The routing value for the document.
  optional string routing = 1;

  optional int64 if_primary_term = 2;

  // The sequence number of the document.
  optional int64 if_seq_no = 3;

  optional int64 version = 4;

  optional VersionType version_type = 5;

  // The unique identifier for a resource.
  optional string underscore_id = 6;

  optional string underscore_index = 7;

  // When `true`, the request's actions must target an index alias.
  optional bool require_alias = 8;

  optional int32 retry_on_conflict = 9;
}

// Bulk response contains the individual results of each operation in the request, returned in the order submitted. The success or failure of an individual operation does not affect other operations in the request.
message BulkResponse {
  oneof response {
    // The bulk success response
    BulkResponseBody bulk_response_body = 1;
    // The bulk error response
    BulkErrorResponse bulk_error_response = 2;
  }
}

message BulkErrorResponse {
  // [optional] The bulk error
  optional Error error = 1;
  // [optional] HTTP response status code
  optional int32 status = 2;
}

message BulkResponseBody {

  // [optional] If true, one or more of the operations in the bulk request did not complete successfully.
  optional bool errors = 1;
  // [optional] Contains the result of each operation in the bulk request, in the order they were submitted.
  repeated Item items = 2;
  // [optional] How long, in milliseconds, it took to process the bulk request.
  optional int64 took = 3;
  // [optional] How long, in milliseconds, it took to process documents through an ingest pipeline
  optional int64 ingest_took = 4;

}

message Item {
  oneof item {
    ResponseItem create = 1;
    ResponseItem delete = 2;
    ResponseItem index = 3;
    ResponseItem update = 4;
  }
}

message ResponseItem {
  // HTTP status code returned for the operation.
  int32 status = 1;

  optional ErrorCause error = 2;

  // Result of the operation. Successful values are `created`, `deleted`, and `updated`.
  optional string result = 3;

  optional bool forced_refresh = 4;

  optional InlineGetDictUserDefined get = 5;

  // The document type.
  optional string underscore_type = 6;

  // The document ID associated with the operation.
  optional string underscore_id = 7;

  // The name of the index associated with the operation. If the operation targets a data stream, this is the backing index into which the document was written.
  optional string underscore_index = 8;

  // The primary term assigned to the document for the operation.
  optional int64 underscore_primary_term = 9;

  // The sequence number of the document.
  optional int64 underscore_seq_no = 10;

  optional ShardStatistics underscore_shards = 11;

  optional int64 underscore_version = 12;
}


message InlineGetDictUserDefined {
  // The fields retrieved from the document.
  optional ObjectMap fields = 1;

  // Whether the document was found.
  bool found = 2;

  // The sequence number of the document.
  optional int64 underscore_seq_no = 3;

  // The primary term of the document.
  optional int32 underscore_primary_term = 4;

  // The routing value for the document.
  optional string underscore_routing = 5;

  // The source of the document.
  optional ObjectMap underscore_source = 6;
}

message Refresh {
  oneof refresh {
    // Whether to refresh the affected shards immediately.
    bool bool = 1;

    // Do not refresh the affected shards.
    bool refresh_false = 2;

    // Refresh the affected shards immediately.
    bool refresh_true = 3;

    // Wait for the changes to become visible before replying.
    bool refresh_wait_for = 4;
  }
}

// index document.
message IndexDocumentRequest {
  // [optional] Creates or indexes a specific ID.
  optional string id = 1;
  // [optional] Name of the data stream or index to target.
  optional string index = 2;
  // [optional] Only perform the operation if the document has this primary term. Can not be set if op_type=create.
  optional int64 if_primary_term = 3;
  // [optional] Only perform the operation if the document has this sequence number. Can not be set if op_type=create.
  optional int64 if_seq_no = 4;

  // [optional] Set to create to only index the document if it does not already exist (put if absent). If a document with the specified `_id` already exists, the indexing operation will fail. Same as using the `<index>/_create` endpoint. Valid values: `index`, `create`. If document id is specified, it defaults to `index`. Otherwise, it defaults to `create`.
  optional OpType op_type = 5;
  // [optional] ID of the pipeline to use to preprocess incoming documents. If the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request. If a final pipeline is configured it will always run, regardless of the value of this parameter.
  optional string pipeline = 6;

  // [optional] enum of whether to refresh the affected shards after performing the indexing operations. Default is false
  optional Refresh refresh = 7;
  // [optional] If `true`, the request's actions must target an index alias. Defaults to false. Can not be set if op_type=create.
  optional bool require_alias = 8;
  // [optional] Custom value used to route operations to a specific shard.
  optional string routing = 9;
  // [optional] Period each action waits for the following operations: automatic index creation, dynamic mapping updates, waiting for active shards.
  // Pattern: ^([0-9\.]+)(?:d|h|m|s|ms|micros|nanos)$
  // Defaults to 1m (one minute). This guarantees OpenSearch waits for at least the timeout before failing. The actual wait time could be longer, particularly when multiple waits occur.
  optional string timeout = 10;
  // [optional] Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.
  optional int64 version = 11;

  // [optional] Assigns a specific type to the document.
  optional VersionType version_type = 12;
  // [optional] The number of active shards that must be available before OpenSearch processes the request. Default is 1 (only the primary shard). Set to all or a positive integer. Values greater than 1 require replicas. For example, if you specify a value of 3, the index must have two replicas distributed across two additional nodes for the operation to succeed.
  optional WaitForActiveShards wait_for_active_shards = 13;
  // [required] contain the information you want to index.
  // Provide document either as ObjectMap or bytes
  oneof index_document_request_request_body {
    ObjectMap request_body = 14;

    // Use bytes for better latency/performance, as it reduces payload size over the wire
    bytes bytes_request_body = 15;
  }
  // [optional] Controls how document source fields are returned in the response.
  // - If not set, source is returned as bytes (default, recommended for better performance)
  // - If set to SOURCE_TYPE_STRUCT: source is returned as a structured protobuf message
  // Note: Using SOURCE_TYPE_STRUCT may impact performance due to additional serialization overhead
  optional SourceType source_type = 16;
}

// The response from index document request
message IndexDocumentResponse {
  oneof response {
    // Index document success response
    IndexDocumentResponseBody index_document_response_body = 1;
    // Index document failure response
    IndexDocumentErrorResponse index_document_error_response = 2;
  }
}

// The error response from index document request
message IndexDocumentErrorResponse {
  // [optional]
  optional Error error = 1;
  // [optional] HTTP response status code
  optional int32 status = 2;
}

enum Result {
  RESULT_UNSPECIFIED = 0;
  RESULT_CREATED = 1;
  RESULT_DELETED = 2;
  RESULT_NOOP = 3;
  RESULT_NOT_FOUND = 4;
  RESULT_UPDATED = 5;
}

message IndexDocumentResponseBody {
  // [optional] The document type.
  optional string type = 1 [json_name = "_type"];
  // [optional] The document's ID.
  optional string id = 2 [json_name = "_id"];
  // [optional] The name of the index.
  optional string index = 3 [json_name = "_index"];
  // [optional] The primary term assigned when the document was indexed.
  optional int64 primary_term = 4 [json_name = "_primary_term"];

  // [optional] The result of the index operation.
  optional Result result = 5;
  // [optional] The sequence number assigned when the document was indexed.
  optional int64 seq_no = 6 [json_name = "_seq_no"];
  // [optional] Detailed information about the cluster's shards.
  ShardStatistics shards = 7 [json_name = "_shards"];
  // [optional] The document's version.
  optional int64 version = 8 [json_name = "_version"];
  // [optional] if `true`, it requires immediate visibility of the document
  optional bool forced_refresh = 9;
}

// Delete index document with Id request
message DeleteDocumentRequest {
  // [required] Unique identifier for the document.
  string id = 1;
  // [required] Name of the target index.
  string index = 2;
  // [optional] Only perform the operation if the document has this primary term.
  optional int64 if_primary_term = 3;
  // [optional] Only perform the operation if the document has this sequence number.
  optional int64 if_seq_no = 4;

  // [optional] enum of whether to refresh the affected shards after performing the indexing operations. Default is false
  optional Refresh refresh = 5;
  // Custom value used to route operations to a specific shard.
  optional string routing = 6;
  // [optional] Period each action waits for the following operations: automatic index creation, dynamic mapping updates, waiting for active shards.
  // Pattern: ^([0-9\.]+)(?:d|h|m|s|ms|micros|nanos)$
  // Defaults to 1m (one minute). This guarantees OpenSearch waits for at least the timeout before failing. The actual wait time could be longer, particularly when multiple waits occur.
  optional string timeout = 7;
  // [optional] Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.
  optional int64 version = 8;
  // [optional] Assigns a specific type to the document.
  optional VersionType version_type = 9;
  // [optional] The number of active shards that must be available before OpenSearch processes the request. Default is 1 (only the primary shard). Set to all or a positive integer. Values greater than 1 require replicas. For example, if you specify a value of 3, the index must have two replicas distributed across two additional nodes for the operation to succeed.
  optional WaitForActiveShards wait_for_active_shards = 10;
}

message DeleteDocumentResponseBody {
  // [optional] The document type.
  optional string type = 1 [json_name = "_type"];
  // [optional] The document's ID.
  optional string id = 2 [json_name = "_id"];
  // [optional] The name of the index.
  optional string index = 3 [json_name = "_index"];
  // [optional] The primary term assigned when the document was indexed.
  optional int64 primary_term = 4 [json_name = "_primary_term"];
  // [optional] The result of the index operation.
  optional Result result = 5;
  // [optional] The sequence number assigned when the document was indexed.
  optional int64 seq_no = 6 [json_name = "_seq_no"];
  // [optional] Detailed information about the cluster's shards.
  ShardStatistics shards = 7 [json_name = "_shards"];
  // [optional] The document's version.
  optional int64 version = 8 [json_name = "_version"];
  // [optional] if `true`, it requires immediate visibility of the document
  optional bool forced_refresh = 9;

}

// The response from delete index document with Id request
message DeleteDocumentResponse {
  oneof response {
    DeleteDocumentResponseBody delete_document_response_body = 1;
    DeleteDocumentErrorResponse delete_document_error_response = 2;
  }
}
// The error response from delete index document with Id request
message DeleteDocumentErrorResponse {
  // [optional]
  optional Error error = 1;
  // [optional] HTTP response status code
  optional int32 status = 2;
}

// Update index document with Id request
message UpdateDocumentRequest {
  // [optional] Unique identifier for the document.
  optional string id = 1;
  // [optional] Name of the data stream or index to target. If the target doesn't exist and matches the name or wildcard (`*`) pattern of an index template with a `data_stream` definition, this request creates the data stream. If the target doesn't exist and doesn't match a data stream template, this request creates the index.
  optional string index = 2;
  // [optional] Set to false to disable source retrieval. You can also specify a comma-separated list of the fields you want to retrieve.
  optional SourceConfigParam source = 3 [json_name = "_source"];
  // [optional] A comma-separated list of source fields to exclude from the response.
  repeated string source_excludes = 4 [json_name = "_source_excludes"];
  // [optional] A comma-separated list of source fields to include in the response.
  repeated string source_includes = 5 [json_name = "_source_includes"];
  // [optional] Only perform the operation if the document has this primary term.
  optional int64 if_primary_term = 6;
  // [optional] Only perform the operation if the document has this sequence number.
  optional int64 if_seq_no = 7;
  // [optional] The script language.
  optional string lang = 8;

  // [optional] enum of whether to refresh the affected shards after performing the indexing operations. Default is false
  optional Refresh refresh = 9;
  // [optional] If `true`, the request's actions must target an index alias. Defaults to false.
  optional bool require_alias = 10;
  // Specify how many times should the operation be retried when a conflict occurs.
  optional int32 retry_on_conflict = 11;
  // Custom value used to route operations to a specific shard.
  optional string routing = 12;
  // Period to wait for dynamic mapping updates and active shards. This guarantees OpenSearch waits for at least the timeout before failing. The actual wait time could be longer, particularly when multiple waits occur.
  // Pattern: ^([0-9\.]+)(?:d|h|m|s|ms|micros|nanos)$
  optional string timeout = 13;
  // [optional] The number of active shards that must be available before OpenSearch processes the request. Default is 1 (only the primary shard). Set to all or a positive integer. Values greater than 1 require replicas. For example, if you specify a value of 3, the index must have two replicas distributed across two additional nodes for the operation to succeed.
  optional WaitForActiveShards wait_for_active_shards = 14;
  // [required] The update document request body
  UpdateDocumentRequestBody request_body = 15;

  // [optional] Controls how document source fields are returned in the response.
  // - If not set, source is returned as bytes (default, recommended for better performance)
  // - If set to SOURCE_TYPE_STRUCT: source is returned as a structured protobuf message
  // Note: Using SOURCE_TYPE_STRUCT may impact performance due to additional serialization overhead
  optional SourceType source_type = 16;
}

message UpdateDocumentRequestBody {
  // [optional] Controls whether an operation is ignored if there is no change. Default is true.
  optional bool detect_noop = 1;

  // [optional] A partial update to an existing document.
  // Opt for either ObjectMap or bytes
  oneof update_document_request_body_doc {
    ObjectMap doc = 2;

    // Use bytes for better latency/performance, as it reduces payload size over the wire
    bytes bytes_doc = 8;
  }

  // [optional] Set to true to use the contents of 'doc' as the value of 'upsert'
  optional bool doc_as_upsert = 3;
  // [optional] Script for more complex document updates by defining the script with the `source` or `id` from a document
  optional Script script = 4;

  //[optional] Set to true to execute the script whether or not the document exists.
  optional bool scripted_upsert = 5;
  // [optional] Defines how to fetch a source. Fetching can be disabled entirely, or the source can be filtered.
  optional SourceConfig source = 6 [json_name = "_source"];

  // [optional] If the document does not already exist, the contents of 'upsert' are inserted as a new document. If the document exists, the 'script' is executed.
  // Provide document either as ObjectMap or bytes
  oneof update_document_request_body_upsert {
    ObjectMap upsert = 7;

    // Use bytes for better latency/performance, as it reduces payload size over the wire
    bytes bytes_upsert = 9;
  }
}

// The response from update index document with Id request
message UpdateDocumentResponse {
  oneof response {
    UpdateDocumentResponseBody update_document_response_body = 1;
    UpdateDocumentErrorResponse update_document_error_response = 2;
  }
}
// The error response from update index document with Id request
message UpdateDocumentErrorResponse {
  // [optional]
  optional Error error = 1;
  // [optional]  HTTP response status code
  optional int32 status = 2;
}

message UpdateDocumentResponseBody {
  // [optional] The document type.
  optional string type = 1 [json_name = "_type"];
  // [optional] The document's ID.
  optional string id = 2 [json_name = "_id"];
  // [optional] The name of the index.
  optional string index = 3 [json_name = "_index"];
  // [optional] The primary term assigned when the document was indexed.
  optional int64 primary_term = 4 [json_name = "_primary_term"];
  // [optional] The result of the index operation.
  optional Result result = 5;
  // [optional] The sequence number assigned when the document was indexed.
  optional int64 seq_no = 6 [json_name = "_seq_no"];
  // [optional] Detailed information about the cluster's shards.
  optional ShardStatistics shards = 7 [json_name = "_shards"];
  // [optional] The document's version.
  optional int64 version = 8 [json_name = "_version"];
  // [optional] if `true`, it requires immediate visibility of the document
  optional bool forced_refresh = 9;
  // [optional]
  optional InlineGet get = 10;
}

// Get document request with document ID specified
message GetDocumentRequest {
  // [required] Unique identifier for the document.
  string id = 1;
  // [required] Name of the data stream or index to target. If the target doesn't exist and matches the name or wildcard (`*`) pattern of an index template with a `data_stream` definition, this request creates the data stream. If the target doesn't exist and doesn't match a data stream template, this request creates the index.
  string index = 2;
  // [optional] Set to false to disable source retrieval. You can also specify a comma-separated list of the fields you want to retrieve. Default is true.
  optional SourceConfigParam source = 3 [json_name = "_source"];
  // [optional] A comma-separated list of source fields to exclude from the response.
  repeated string source_excludes = 4 [json_name = "_source_excludes"];
  // [optional] A comma-separated list of source fields to include in the response.
  repeated string source_includes = 5 [json_name = "_source_includes"];
  // [optional] Specifies a preference of which shard to retrieve results from. Available options are _local, which tells the operation to retrieve results from a locally allocated shard replica, and a custom string value assigned to a specific shard replica. By default, OpenSearch executes get document operations on random shards.
  optional string preference = 6;
  // [optional] Specifies whether the operation should run in realtime. If false, the operation waits for the index to refresh to analyze the source to retrieve data, which makes the operation near-realtime. Default is true.
  optional bool realtime = 7;
  // [optional] If true, OpenSearch refreshes shards to make the get operation available to search results. Valid options are true, false, and wait_for, which tells OpenSearch to wait for a refresh before executing the operation. Default is false.
  optional bool refresh = 8;
  // [optional] A value used to route the operation to a specific shard.
  optional string routing = 9;
  // [optional] List of stored fields to return as part of a hit. If no fields are specified, no stored fields are included in the response. If this field is specified, the `_source` parameter defaults to false.
  repeated string stored_fields = 10;
  // [optional] Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.
  optional int64 version = 11;
  // [optional] Assigns a specific type to the document.
  optional VersionType version_type = 12;

  // [optional] Controls how document source fields are returned in the response.
  // - If not set, source is returned as bytes (default, recommended for better performance)
  // - If set to SOURCE_TYPE_STRUCT: source is returned as a structured protobuf message
  // Note: Using SOURCE_TYPE_STRUCT may impact performance due to additional serialization overhead
  optional SourceType source_type = 13;
}

message GetDocumentResponseBody {
  // [optional] The document type.
  optional string type = 1 [json_name = "_type"];
  // [optional] The name of the index.
  optional string index = 2 [json_name = "_index"];
  // [optional] Contains the document's data that's stored in the index. Only returned if both stored_fields and found are true.
  ObjectMap fields = 3;
  // [optional] Whether the document exists.
  optional bool found = 4;
  // [optional] The document's ID.
  optional string id = 5 [json_name = "_id"];
  // [optional] The primary term assigned when the document is indexed.
  optional int64 primary_term = 6 [json_name = "_primary_term"];
  // [optional] The shard that the document is routed to. If the document is not routed to a particular shard, this field is omitted.
  optional string routing = 7 [json_name = "_routing"];
  // [optional] The sequence number assigned when the document was indexed.
  optional int64 seq_no = 8 [json_name = "_seq_no"];
  // [optional] Contains the document's data if found is true. If _source is set to false or stored_fields is set to true in the URL parameters, this field is omitted.
  // Source to be returned as either an Struct or bytes
  oneof get_document_response_body_source {

    // struct_source field to be returned upon explicit request by user
    .google.protobuf.Struct struct_source = 9;
    // Use bytes for better latency/performance, as it reduces payload size over the wire
    bytes source = 11 [json_name = "_source"];

  }
  // [optional] The document's version number. Updated whenever the document changes.
  optional int64 version = 10 [json_name = "_version"];
}

// The response from get document request with document ID specified request
message GetDocumentResponse {
  oneof response {
    GetDocumentResponseBody get_document_response_body = 1;
    GetDocumentErrorResponse get_document_error_response = 2;
  }
}
// The error response from get document request with document ID specified request
message GetDocumentErrorResponse {
  // [optional]
  optional Error error = 1;
  // [optional] HTTP response status code
  optional int32 status = 2;
}
